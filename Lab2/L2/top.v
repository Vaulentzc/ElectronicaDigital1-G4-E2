/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module top (
  input I1_Red_Electrica, // i+
  input I4_Energia_Solar,
  input I3_Paro_Emergencia,
  output Q8_Energia_Casa,
  output Q1a_Tipo_de_Red_RE,
  output Q2_I_Red_ELectrica,
  output Q1b_TIpo_de_Red_B,
  output Q3_I_Bateria,
  output Q4_I_Energia_Solar,
  output Q5_I_Paro_Emergencia
);
  wire Q3_I_Bateria_temp;
  wire Q1b_TIpo_de_Red_B_temp;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( 1'b1 ),
    .C( I4_Energia_Solar ),
    .Q( Q3_I_Bateria_temp )
  );
  assign Q1b_TIpo_de_Red_B_temp = (~ I1_Red_Electrica & Q3_I_Bateria_temp);
  assign Q1a_Tipo_de_Red_RE = ~ Q1b_TIpo_de_Red_B_temp;
  assign Q8_Energia_Casa = (((I1_Red_Electrica & ~ Q1b_TIpo_de_Red_B_temp) | (Q1b_TIpo_de_Red_B_temp & Q3_I_Bateria_temp)) & ~ I3_Paro_Emergencia);
  assign Q2_I_Red_ELectrica = I1_Red_Electrica;
  assign Q1b_TIpo_de_Red_B = Q1b_TIpo_de_Red_B_temp;
  assign Q3_I_Bateria = Q3_I_Bateria_temp;
  assign Q4_I_Energia_Solar = I4_Energia_Solar;
  assign Q5_I_Paro_Emergencia = I3_Paro_Emergencia;
endmodule
